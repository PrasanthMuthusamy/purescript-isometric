// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;            

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };             
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var $times = function (dictSemiring) {
      return mul(dictSemiring);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (dictSemigroupoid) {
      return flip(compose(dictSemigroupoid));
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $79 = compare(dictOrd)(a1)(a2);
              if ($79 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["<="] = $less$eq;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["*"] = $times;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["applyArray"] = applyArray;
  exports["applicativeArray"] = applicativeArray;
  exports["bindArray"] = bindArray;
  exports["monadArray"] = monadArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringNumber"] = semiringNumber;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  exports["Alternative"] = Alternative;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var when = function (dictMonad) {
      return function (v) {
          return function (m) {
              if (v) {
                  return m;
              };
              if (!v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ v.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["when"] = when;;
 
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["readSTRef"] = $foreign.readSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];     
  var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
  }; 
  var guard = function (dictMonadPlus) {
      return function (v) {
          if (v) {
              return Prelude["return"]((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadPlus line 35, column 1 - line 36, column 1: " + [ v.constructor.name ]);
      };
  };
  exports["MonadPlus"] = MonadPlus;
  exports["guard"] = guard;;
 
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      /* jshint maxparams: 2 */
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (b) {
      return function (f) {
          return function (v) {
              if (v instanceof Nothing) {
                  return b;
              };
              if (v instanceof Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Prelude["const"](false));
  var eqMaybe = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return true;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["eqMaybe"] = eqMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($159) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($159));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $85 = cmp(v.value0)(v1);
                          if ($85 instanceof Prelude.GT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 246, column 3 - line 247, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $89 = cmp(v.value0)(v1);
                          if ($89 instanceof Prelude.LT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(z)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($162) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($163) {
                      return Data_Monoid_Disj.Disj(p($163));
                  })($162));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($164) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($164));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["minimumBy"] = minimumBy;
  exports["minimum"] = minimum;
  exports["maximumBy"] = maximumBy;
  exports["maximum"] = maximum;
  exports["elem"] = elem;
  exports["sum"] = sum;
  exports["any"] = any;
  exports["intercalate"] = intercalate;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
  exports["unsafeThrow"] = $foreign.unsafeThrow;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $dot$dot = $foreign.range;
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $44 = comp(x)(y);
                  if ($44 instanceof Prelude.GT) {
                      return 1;
                  };
                  if ($44 instanceof Prelude.EQ) {
                      return 0;
                  };
                  if ($44 instanceof Prelude.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 409, column 3 - line 414, column 1: " + [ $44.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  exports["sortBy"] = sortBy;
  exports[".."] = $dot$dot;
  exports["concat"] = $foreign.concat;
  exports["reverse"] = $foreign.reverse;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];     
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var toList = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return acc1;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 365, column 1 - line 366, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 651, column 1 - line 652, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $190 = start > end;
                  if ($190) {
                      return 1;
                  };
                  if (!$190) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ $190.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 718, column 1 - line 725, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($346) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($346));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy_v) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var v = __copy_v;
                  tco: while (true) {
                      var b1 = b;
                      if (v instanceof Nil) {
                          return b1;
                      };
                      if (v instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(v.value0);
                          var __tco_v = v.value1;
                          o = __tco_o;
                          b = __tco_b;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (v) {
              if (v instanceof Nil) {
                  return b;
              };
              if (v instanceof Cons) {
                  return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, v.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Prelude.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Nil) {
                  return Prelude.pure(dictApplicative)(Nil.value);
              };
              if (v instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var concatMap = function (f) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  };                                                       
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (xs) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(xs))(Prelude["<*>"](applyList)(v.value1)(xs));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, xs.constructor.name ]);
      };
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["zipWith"] = zipWith;
  exports["concatMap"] = concatMap;
  exports["reverse"] = reverse;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["toList"] = toList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (__copy_dictOrd) {
      return function (__copy_k) {
          return function (__copy_v) {
              var dictOrd = __copy_dictOrd;
              var k = __copy_k;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var k1 = k;
                  if (v instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                      return new Data_Maybe.Just(v.value2);
                  };
                  var k1 = k;
                  if (v instanceof Two && Prelude["<"](dictOrd)(k1)(v.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value0;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  var k1 = k;
                  if (v instanceof Two) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value3;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  var k1 = k;
                  if (v instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                      return new Data_Maybe.Just(v.value2);
                  };
                  var k1 = k;
                  if (v instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value4)) {
                      return new Data_Maybe.Just(v.value5);
                  };
                  var k1 = k;
                  if (v instanceof Three && Prelude["<"](dictOrd)(k1)(v.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value0;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  var k1 = k;
                  if (v instanceof Three && (Prelude["<"](dictOrd)(v.value1)(k1) && Prelude["<="](dictOrd)(k1)(v.value4))) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value3;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Three) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_k = k;
                      var __tco_v = v.value6;
                      dictOrd = __tco_dictOrd;
                      k = __tco_k;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ k.constructor.name, v.constructor.name ]);
              };
          };
      };
  }; 
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Leaf) {
                              return up(ctx1)(new KickUp(Leaf.value, k1, v2, Leaf.value));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx1)(new Two(v1.value0, k1, v2, v1.value3));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Two && Prelude["<"](dictOrd)(k1)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx1);
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Two) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx1);
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx1)(new Three(v1.value0, k1, v2, v1.value3, v1.value4, v1.value5, v1.value6));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value4)) {
                              return fromZipper(dictOrd)(ctx1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k1, v2, v1.value6));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && Prelude["<"](dictOrd)(k1)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx1);
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(k1) && Prelude["<="](dictOrd)(k1)(v1.value4))) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx1);
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && (v.value0.value2 instanceof Leaf && v1 instanceof Leaf))) {
                      return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && (v.value0.value0 instanceof Leaf && v1 instanceof Leaf))) {
                      return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Two)) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3);
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Two)) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1);
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && (v.value0.value2 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && (v.value0.value0 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && (v.value0.value0 instanceof Leaf && (v.value0.value3 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value4, v.value0.value5, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0, v.value0.value5.value1, v.value0.value5.value2, v.value0.value5.value3)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3, v.value0.value4, v.value0.value5, v1)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0), v.value0.value5.value1, v.value0.value5.value2, new Two(v.value0.value5.value3, v.value0.value5.value4, v.value0.value5.value5, v.value0.value5.value6)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3), v.value0.value3.value4, v.value0.value3.value5, new Two(v.value0.value3.value6, v.value0.value4, v.value0.value5, v1)));
                  };
                  return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'up'");
              };
          };
      };
      var removeMaxNode = function (__copy_ctx) {
          return function (__copy_v) {
              var ctx = __copy_ctx;
              var v = __copy_v;
              tco: while (true) {
                  var ctx1 = ctx;
                  if (v instanceof Two && (v.value0 instanceof Leaf && v.value3 instanceof Leaf)) {
                      return up(ctx1)(Leaf.value);
                  };
                  var ctx1 = ctx;
                  if (v instanceof Two) {
                      var __tco_ctx = new Data_List.Cons(new TwoRight(v.value0, v.value1, v.value2), ctx1);
                      var __tco_v = v.value3;
                      ctx = __tco_ctx;
                      v = __tco_v;
                      continue tco;
                  };
                  var ctx1 = ctx;
                  if (v instanceof Three && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && v.value6 instanceof Leaf))) {
                      return up(new Data_List.Cons(new TwoRight(Leaf.value, v.value1, v.value2), ctx1))(Leaf.value);
                  };
                  if (v instanceof Three) {
                      var __tco_ctx = new Data_List.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3, v.value4, v.value5), ctx);
                      var __tco_v = v.value6;
                      ctx = __tco_ctx;
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Leaf) {
                      return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'removeMaxNode'");
                  };
                  throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, v.constructor.name ]);
              };
          };
      };
      var maxNode = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Two && v.value3 instanceof Leaf) {
                  return {
                      key: v.value1, 
                      value: v.value2
                  };
              };
              if (v instanceof Two) {
                  var __tco_v = v.value3;
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Three && v.value6 instanceof Leaf) {
                  return {
                      key: v.value4, 
                      value: v.value5
                  };
              };
              if (v instanceof Three) {
                  var __tco_v = v.value6;
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Leaf) {
                  return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'maxNode'");
              };
              throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ v.constructor.name ]);
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  var ctx = __copy_ctx;
                  var k = __copy_k;
                  var v = __copy_v;
                  tco: while (true) {
                      var ctx1 = ctx;
                      if (v instanceof Leaf) {
                          return fromZipper(dictOrd)(ctx1)(Leaf.value);
                      };
                      var ctx1 = ctx;
                      var k1 = k;
                      if (v instanceof Two && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)))) {
                          return up(ctx1)(Leaf.value);
                      };
                      var ctx1 = ctx;
                      var k1 = k;
                      if (v instanceof Two) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                              var max = maxNode(v.value0);
                              return removeMaxNode(new Data_List.Cons(new TwoLeft(max.key, max.value, v.value3), ctx1))(v.value0);
                          };
                          if (Prelude["<"](dictOrd)(k1)(v.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v.value1, v.value2, v.value3), ctx1);
                              var __tco_v = v.value0;
                              ctx = __tco_ctx;
                              k = k1;
                              v = __tco_v;
                              continue tco;
                          };
                          if (Prelude.otherwise) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v.value0, v.value1, v.value2), ctx1);
                              var __tco_v = v.value3;
                              ctx = __tco_ctx;
                              k = k1;
                              v = __tco_v;
                              continue tco;
                          };
                      };
                      var ctx1 = ctx;
                      var k1 = k;
                      if (v instanceof Three && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && v.value6 instanceof Leaf))) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                              return fromZipper(dictOrd)(ctx1)(new Two(Leaf.value, v.value4, v.value5, Leaf.value));
                          };
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value4)) {
                              return fromZipper(dictOrd)(ctx1)(new Two(Leaf.value, v.value1, v.value2, Leaf.value));
                          };
                      };
                      if (v instanceof Three) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v.value1)) {
                              var max = maxNode(v.value0);
                              return removeMaxNode(new Data_List.Cons(new ThreeLeft(max.key, max.value, v.value3, v.value4, v.value5, v.value6), ctx))(v.value0);
                          };
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v.value4)) {
                              var max = maxNode(v.value3);
                              return removeMaxNode(new Data_List.Cons(new ThreeMiddle(v.value0, v.value1, v.value2, max.key, max.value, v.value6), ctx))(v.value3);
                          };
                          if (Prelude["<"](dictOrd)(k)(v.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4, v.value5, v.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v.value0;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              continue tco;
                          };
                          if (Prelude["<"](dictOrd)(v.value1)(k) && Prelude["<"](dictOrd)(k)(v.value4)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v.value0, v.value1, v.value2, v.value4, v.value5, v.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              continue tco;
                          };
                          if (Prelude.otherwise) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3, v.value4, v.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              continue tco;
                          };
                      };
                      throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var $584 = f(lookup(dictOrd)(k)(m));
                  if ($584 instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if ($584 instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)($584.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map line 235, column 1 - line 236, column 1: " + [ $584.constructor.name ]);
              };
          };
      };
  };
  exports["alter"] = alter;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = empty;;
 
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Map = PS["Data.Map"];
  var Data_Set = PS["Data.Set"];     
  var AcyclicSCC = (function () {
      function AcyclicSCC(value0) {
          this.value0 = value0;
      };
      AcyclicSCC.create = function (value0) {
          return new AcyclicSCC(value0);
      };
      return AcyclicSCC;
  })();
  var CyclicSCC = (function () {
      function CyclicSCC(value0) {
          this.value0 = value0;
      };
      CyclicSCC.create = function (value0) {
          return new CyclicSCC(value0);
      };
      return CyclicSCC;
  })();
  var Edge = (function () {
      function Edge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Edge.create = function (value0) {
          return function (value1) {
              return new Edge(value0, value1);
          };
      };
      return Edge;
  })();
  var Graph = (function () {
      function Graph(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Graph.create = function (value0) {
          return function (value1) {
              return new Graph(value0, value1);
          };
      };
      return Graph;
  })();
  var vertices = function (v) {
      if (v instanceof AcyclicSCC) {
          return Data_List.singleton(v.value0);
      };
      if (v instanceof CyclicSCC) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Data.Graph line 58, column 1 - line 59, column 1: " + [ v.constructor.name ]);
  };
  var popUntil = function (__copy_dictEq) {
      return function (__copy_makeKey) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  return function (__copy_popped) {
                      var dictEq = __copy_dictEq;
                      var makeKey = __copy_makeKey;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      var popped = __copy_popped;
                      tco: while (true) {
                          if (v1 instanceof Data_List.Nil) {
                              return {
                                  path: Data_List.Nil.value, 
                                  component: popped
                              };
                          };
                          var makeKey1 = makeKey;
                          var v2 = v;
                          if (v1 instanceof Data_List.Cons && Prelude["=="](dictEq)(makeKey1(v2))(makeKey1(v1.value0))) {
                              return {
                                  path: v1.value1, 
                                  component: new Data_List.Cons(v1.value0, popped)
                              };
                          };
                          if (v1 instanceof Data_List.Cons) {
                              var __tco_dictEq = dictEq;
                              var __tco_makeKey = makeKey;
                              var __tco_v = v;
                              var __tco_v1 = v1.value1;
                              var __tco_popped = new Data_List.Cons(v1.value0, popped);
                              dictEq = __tco_dictEq;
                              makeKey = __tco_makeKey;
                              v = __tco_v;
                              v1 = __tco_v1;
                              popped = __tco_popped;
                              continue tco;
                          };
                          throw new Error("Failed pattern match: " + [ makeKey.constructor.name, v.constructor.name, v1.constructor.name, popped.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var maybeMin = function (i) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(i);
          };
          if (v instanceof Data_Maybe.Just) {
              var min = function (x) {
                  return function (y) {
                      var $54 = x < y;
                      if ($54) {
                          return x;
                      };
                      if (!$54) {
                          return y;
                      };
                      throw new Error("Failed pattern match at Data.Graph line 149, column 3 - line 152, column 1: " + [ $54.constructor.name ]);
                  };
              };
              return Data_Maybe.Just.create(min(i)(v.value0));
          };
          throw new Error("Failed pattern match at Data.Graph line 145, column 1 - line 146, column 1: " + [ i.constructor.name, v.constructor.name ]);
      };
  };
  var scc$prime = function (dictEq) {
      return function (dictOrd) {
          return function (makeKey) {
              return function (makeVert) {
                  return function (v) {
                      return Control_Monad_Eff.runPure(function __do() {
                          var v1 = {
                              value: 0
                          };
                          var v2 = {
                              value: Data_List.Nil.value
                          };
                          var v3 = {
                              value: Data_Map.empty
                          };
                          var v4 = {
                              value: Data_Map.empty
                          };
                          var v5 = {
                              value: Data_List.Nil.value
                          };
                          return (function () {
                              var lowlinkOfKey = function (k) {
                                  return function __do() {
                                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Data_Map.lookup(dictOrd)(k)(v4.value))();
                                  };
                              };
                              var lowlinkOf = function (v6) {
                                  return lowlinkOfKey(makeKey(v6));
                              };
                              var isCycle = function (k) {
                                  return Data_Foldable.any(Data_List.foldableList)(Prelude.booleanAlgebraBoolean)(function (v6) {
                                      return Prelude["=="](dictEq)(v6.value0)(k) && Prelude["=="](dictEq)(v6.value1)(k);
                                  })(v.value1);
                              };
                              var makeComponent = function (v6) {
                                  if (v6 instanceof Data_List.Cons && (v6.value1 instanceof Data_List.Nil && !isCycle(makeKey(v6.value0)))) {
                                      return new AcyclicSCC(v6.value0);
                                  };
                                  return new CyclicSCC(v6);
                              };
                              var indexOfKey = function (k) {
                                  return function __do() {
                                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Data_Map.lookup(dictOrd)(k)(v3.value))();
                                  };
                              };
                              var strongConnect = function (k) {
                                  var v6 = makeVert(k);
                                  return function __do() {
                                      var v7 = v1.value;
                                      v3.value = Data_Map.insert(dictOrd)(k)(v7)(v3.value);
                                      v4.value = Data_Map.insert(dictOrd)(k)(v7)(v4.value);
                                      v1.value = v7 + 1 | 0;
                                      v2.value = Data_List.Cons.create(v6)(v2.value);
                                      Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(v.value1)(function (v8) {
                                          return Control_Monad.when(Control_Monad_Eff.monadEff)(Prelude["=="](dictEq)(k)(v8.value0))(function __do() {
                                              var v9 = indexOfKey(v8.value1)();
                                              return (function () {
                                                  if (v9 instanceof Data_Maybe.Nothing) {
                                                      var w = makeVert(v8.value1);
                                                      return function __do() {
                                                          strongConnect(v8.value1)();
                                                          var v11 = lowlinkOfKey(v8.value1)();
                                                          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v11)(function (lowlink) {
                                                              return Control_Monad_ST.modifySTRef(v4)(Data_Map.alter(dictOrd)(maybeMin(lowlink))(k));
                                                          })();
                                                      };
                                                  };
                                                  return Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Foldable.elem(Data_List.foldableList)(dictEq)(v8.value1)(Prelude.map(Data_List.functorList)(makeKey)(v2.value)))(function __do() {
                                                      var v11 = indexOfKey(v8.value1)();
                                                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v11)(function (index1) {
                                                          return Control_Monad_ST.modifySTRef(v4)(Data_Map.alter(dictOrd)(maybeMin(index1))(k));
                                                      })();
                                                  });
                                              })()();
                                          });
                                      })();
                                      var v8 = indexOfKey(k)();
                                      var v9 = lowlinkOfKey(k)();
                                      return Control_Monad.when(Control_Monad_Eff.monadEff)(Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqInt))(v8)(v9))(function __do() {
                                          var v10 = v2.value;
                                          return (function () {
                                              var newPath = popUntil(dictEq)(makeKey)(v6)(v10)(Data_List.Nil.value);
                                              return function __do() {
                                                  v5.value = Prelude.flip(Prelude["++"](Data_List.semigroupList))(Data_List.singleton(makeComponent(newPath.component)))(v5.value);
                                                  v2.value = newPath.path;
                                                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
                                              };
                                          })()();
                                      })();
                                  };
                              };
                              var indexOf = function (v6) {
                                  return indexOfKey(makeKey(v6));
                              };
                              var go = function (v6) {
                                  if (v6 instanceof Data_List.Nil) {
                                      return Control_Monad_ST.readSTRef(v5);
                                  };
                                  if (v6 instanceof Data_List.Cons) {
                                      return function __do() {
                                          var v8 = indexOf(v6.value0)();
                                          Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Maybe.isNothing(v8))(strongConnect(makeKey(v6.value0)))();
                                          return go(v6.value1)();
                                      };
                                  };
                                  throw new Error("Failed pattern match at Data.Graph line 70, column 1 - line 71, column 1: " + [ v6.constructor.name ]);
                              };
                              return go(v.value0);
                          })()();
                      });
                  };
              };
          };
      };
  };
  var topSort$prime = function (dictEq) {
      return function (dictOrd) {
          return function (makeKey) {
              return function (makeVert) {
                  return function ($96) {
                      return Data_List.reverse(Data_List.concatMap(vertices)(scc$prime(dictEq)(dictOrd)(makeKey)(makeVert)($96)));
                  };
              };
          };
      };
  };
  var topSort = function (dictEq) {
      return function (dictOrd) {
          return topSort$prime(dictEq)(dictOrd)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["AcyclicSCC"] = AcyclicSCC;
  exports["CyclicSCC"] = CyclicSCC;
  exports["Graph"] = Graph;
  exports["Edge"] = Edge;
  exports["topSort"] = topSort;
  exports["vertices"] = vertices;;
 
})(PS["Data.Graph"] = PS["Data.Graph"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.asin = Math.asin;

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };                         

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;      
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["%"] = $foreign["%"];
  exports["sqrt"] = $foreign.sqrt;
  exports["sin"] = $foreign.sin;
  exports["floor"] = $foreign.floor;
  exports["cos"] = $foreign.cos;
  exports["asin"] = $foreign.asin;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(Prelude.compare(dictOrd))(f);
      };
  };
  exports["comparing"] = comparing;;
 
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(id) {
      return function(initial) {
        return function(send) {
          return function() {
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (id !== "") {
              el.id = id;
              var label = document.createElement("label");
              label.htmlFor = id;
              label.appendChild(document.createTextNode(id));
              div.appendChild(label);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return Signal.runSignal(Prelude.map(Signal.functorSignal)(handler)(v1.value1))();
              };
          };
      };
  };
  var lift = function (msig) {
      return UI(function __do() {
          var v = msig();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([  ], v))();
      });
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Prelude.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (v) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(v));
      };
  });
  var createUI = function (createComp) {
      return function (id) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(id)($$default)(Signal_Channel.send(v))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(v);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ v1 ], signal));
                  })()();
              });
          };
      };
  };                           
  var intSlider = function (id) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return createUI($foreign.cIntRange("range")(min)(max))(id)($$default);
              };
          };
      };
  };                                 
  var numberSlider = function (id) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(id)($$default);
                  };
              };
          };
      };
  };                           
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(v.value0)(v1.value0), Prelude["<*>"](Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Prelude.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Prelude.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Prelude.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.pure(applicativeFlare)(x)));
  });
  var semiringUI = function (dictSemiring) {
      return new Prelude.Semiring(Control_Apply.lift2(applyUI)(Prelude.add(dictSemiring)), Control_Apply.lift2(applyUI)(Prelude.mul(dictSemiring)), Prelude.pure(applicativeUI)(Prelude.one(dictSemiring)), Prelude.pure(applicativeUI)(Prelude.zero(dictSemiring)));
  };
  exports["runFlareWith"] = runFlareWith;
  exports["lift"] = lift;
  exports["intSlider"] = intSlider;
  exports["numberSlider"] = numberSlider;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
  exports["semiringUI"] = semiringUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.stroke(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.fill(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  exports["withContext"] = withContext;
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Data_Int = PS["Data.Int"];     
  var Color = (function () {
      function Color(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Color.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Color(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Color;
  })();                   
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return new Color(r, g, b, 1.0);
          };
      };
  };                              
  var lighten = function (l) {
      return function (v) {
          var interp = function (c) {
              return 255.0 * l + c * (1.0 - l);
          };
          return new Color(interp(v.value0), interp(v.value1), interp(v.value2), v.value3);
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              var h$prime = h / 60.0;
              var chr = (1.0 - $$Math.abs(2.0 * l - 1.0)) * s;
              var m = l - chr / 2.0;
              var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
              var rgb1 = (function () {
                  if (h$prime < 1.0) {
                      return {
                          r: chr, 
                          g: x, 
                          b: 0.0
                      };
                  };
                  if (1.0 <= h$prime && h$prime < 2.0) {
                      return {
                          r: x, 
                          g: chr, 
                          b: 0.0
                      };
                  };
                  if (2.0 <= h$prime && h$prime < 3.0) {
                      return {
                          r: 0.0, 
                          g: chr, 
                          b: x
                      };
                  };
                  if (3.0 <= h$prime && h$prime < 4.0) {
                      return {
                          r: 0.0, 
                          g: x, 
                          b: chr
                      };
                  };
                  if (4.0 <= h$prime && h$prime < 5.0) {
                      return {
                          r: x, 
                          g: 0.0, 
                          b: chr
                      };
                  };
                  if (Prelude.otherwise) {
                      return {
                          r: chr, 
                          g: 0.0, 
                          b: x
                      };
                  };
                  throw new Error("Failed pattern match at Graphics.Drawing.Color line 56, column 1 - line 57, column 1: " + [  ]);
              })();
              return rgb(255.0 * (rgb1.r + m))(255.0 * (rgb1.g + m))(255.0 * (rgb1.b + m));
          };
      };
  };                               
  var gray = rgb(128.0)(128.0)(128.0);
  var colorString = function (v) {
      return "rgba(" + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value0)) + ("," + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value1)) + ("," + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value2)) + ("," + (Prelude.show(Prelude.showNumber)(v.value3) + ")")))))));
  };                              
  var black = rgb(0.0)(0.0)(0.0);
  exports["black"] = black;
  exports["gray"] = gray;
  exports["lighten"] = lighten;
  exports["hsl"] = hsl;
  exports["rgb"] = rgb;
  exports["colorString"] = colorString;;
 
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var optionsString = function (v) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
  };
  var fontString = function (v) {
      return optionsString(v.value2) + (" " + (Prelude.show(Prelude.showInt)(v.value1) + ("px " + v.value0)));
  };
  exports["fontString"] = fontString;;
 
})(PS["Graphics.Drawing.Font"] = PS["Graphics.Drawing.Font"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var $$Math = PS["Math"];
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Circle = (function () {
      function Circle(value0) {
          this.value0 = value0;
      };
      Circle.create = function (value0) {
          return new Circle(value0);
      };
      return Circle;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx, 
              translateY: ty
          });
      };
  }; 
  var semigroupDrawing = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Many) {
              return new Many(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Many) {
              return new Many(Data_List[":"](v)(v1.value0));
          };
          return new Many(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx, 
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (v) {
          if (v instanceof Path && v.value1 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (v instanceof Path && v.value1 instanceof Data_List.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value1.value1)(function (p1) {
                      return Graphics_Canvas.lineTo(ctx)(p1.x)(p1.y);
                  })();
                  return Control_Monad.when(Control_Monad_Eff.monadEff)(v.value0)(Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (v instanceof Rectangle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof Circle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)({
                  x: v.value0.x, 
                  y: v.value0.y, 
                  r: v.value0.r, 
                  start: 0.0, 
                  end: $$Math.pi * 2.0
              }));
          };
          if (v instanceof Composite) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ v.constructor.name ]);
      };
      var applyShadow = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(blur)(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                      return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(width)(ctx);
              })();
          };
      };
      var applyFillStyle = function (v) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
              return Graphics_Canvas.setFillStyle(Graphics_Drawing_Color.colorString(color))(ctx);
          });
      };
      var go = function (v) {
          if (v instanceof Fill) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(v.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Outline) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(v.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Many) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(go);
          };
          if (v instanceof Scale) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Translate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Rotate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Clipped) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(v.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof WithShadow) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Text) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(v.value0))(ctx)();
                  applyFillStyle(v.value3)();
                  return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ v.constructor.name ]);
      };
      return go;
  }; 
  var monoidDrawing = new Data_Monoid.Monoid(function () {
      return semigroupDrawing;
  }, new Many(Data_Monoid.mempty(Data_List.monoidList)));
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value, 
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Prelude.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  }; 
  var closed = function (dictFoldable) {
      return function ($153) {
          return Path.create(true)(Data_List.toList(dictFoldable)($153));
      };
  };
  exports["render"] = render;
  exports["rotate"] = rotate;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["filled"] = filled;
  exports["lineWidth"] = lineWidth;
  exports["fillColor"] = fillColor;
  exports["closed"] = closed;
  exports["semigroupDrawing"] = semigroupDrawing;
  exports["monoidDrawing"] = monoidDrawing;;
 
})(PS["Graphics.Drawing"] = PS["Graphics.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var DOM = PS["DOM"];
  var Signal_Channel = PS["Signal.Channel"];
  var Flare = PS["Flare"];     
  var runFlareDrawing = function (controls) {
      return function (canvasID) {
          return function (ui) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(canvasID)();
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      var v2 = Graphics_Canvas.getCanvasWidth(v.value0)();
                      var v3 = Graphics_Canvas.getCanvasHeight(v.value0)();
                      return (function () {
                          var render$prime = function (drawing) {
                              return function __do() {
                                  Graphics_Canvas.clearRect(v1)({
                                      x: 0.0, 
                                      y: 0.0, 
                                      w: v2, 
                                      h: v3
                                  })();
                                  return Graphics_Drawing.render(v1)(drawing)();
                              };
                          };
                          return Flare.runFlareWith(controls)(render$prime)(ui);
                      })()();
                  };
                  throw new Error("Failed pattern match at Flare.Drawing line 25, column 1 - line 29, column 1: " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["runFlareDrawing"] = runFlareDrawing;;
 
})(PS["Flare.Drawing"] = PS["Flare.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Graphics_Isometric_Types = PS["Graphics.Isometric.Types"];     
  var vector = function (v) {
      return function (v1) {
          return {
              x: v1.x - v.x, 
              y: v1.y - v.y, 
              z: v1.z - v.z
          };
      };
  };
  var translateZ = function (dz) {
      return function (v) {
          return {
              x: v.x, 
              y: v.y, 
              z: v.z + dz
          };
      };
  };
  var translateY = function (dy) {
      return function (v) {
          return {
              x: v.x, 
              y: v.y + dy, 
              z: v.z
          };
      };
  };
  var translateX = function (dx) {
      return function (v) {
          return {
              x: v.x + dx, 
              y: v.y, 
              z: v.z
          };
      };
  };
  var scale = function (f) {
      return function (v) {
          return {
              x: f * v.x, 
              y: f * v.y, 
              z: f * v.z
          };
      };
  };
  var rotateZ = function (phi) {
      return function (v) {
          return {
              x: $$Math.cos(phi) * v.x - $$Math.sin(phi) * v.y, 
              y: $$Math.sin(phi) * v.x + $$Math.cos(phi) * v.y, 
              z: v.z
          };
      };
  };
  var rotateX = function (phi) {
      return function (v) {
          return {
              x: v.x, 
              y: $$Math.cos(phi) * v.y - $$Math.sin(phi) * v.z, 
              z: $$Math.sin(phi) * v.y + $$Math.cos(phi) * v.z
          };
      };
  };
  var point = function (x) {
      return function (y) {
          return function (z) {
              return {
                  x: x, 
                  y: y, 
                  z: z
              };
          };
      };
  };
  var origin = {
      x: 0.0, 
      y: 0.0, 
      z: 0.0
  };
  var dot = function (v) {
      return function (v1) {
          return v.x * v1.x + v.y * v1.y + v.z * v1.z;
      };
  };
  var norm = function (p) {
      return $$Math.sqrt(dot(p)(p));
  };
  var normalize = function (p) {
      var n = norm(p);
      return {
          x: p.x / n, 
          y: p.y / n, 
          z: p.z / n
      };
  };
  var depth = function (p) {
      return p.x + p.y + p.z;
  };
  var cross = function (v) {
      return function (v1) {
          return {
              x: v.y * v1.z - v.z * v1.y, 
              y: v.z * v1.x - v.x * v1.z, 
              z: v.x * v1.y - v.y * v1.x
          };
      };
  };
  exports["depth"] = depth;
  exports["scale"] = scale;
  exports["rotateZ"] = rotateZ;
  exports["rotateX"] = rotateX;
  exports["translateZ"] = translateZ;
  exports["translateY"] = translateY;
  exports["translateX"] = translateX;
  exports["cross"] = cross;
  exports["normalize"] = normalize;
  exports["norm"] = norm;
  exports["dot"] = dot;
  exports["vector"] = vector;
  exports["origin"] = origin;
  exports["point"] = point;;
 
})(PS["Graphics.Isometric.Point"] = PS["Graphics.Isometric.Point"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Isometric_Point = PS["Graphics.Isometric.Point"];
  var Graphics_Isometric_Types = PS["Graphics.Isometric.Types"];     
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var transform = function (t) {
      var go = function (v) {
          if (v instanceof Fill) {
              return new Fill(v.value0, Prelude["<$>"](Prelude.functorArray)(Prelude.map(Prelude.functorArray)(t))(v.value1));
          };
          if (v instanceof Many) {
              return new Many(Prelude["<$>"](Data_List.functorList)(transform(t))(v.value0));
          };
          throw new Error("Failed pattern match at Graphics.Isometric line 88, column 5 - line 89, column 5: " + [ v.constructor.name ]);
      };
      return go;
  };
  var translateX = function (dx) {
      return transform(Graphics_Isometric_Point.translateX(dx));
  };
  var translateY = function (dy) {
      return transform(Graphics_Isometric_Point.translateY(dy));
  };
  var translateZ = function (dz) {
      return transform(Graphics_Isometric_Point.translateZ(dz));
  };
  var semigroupScene = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Many) {
              return new Many(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Many) {
              return new Many(Data_List[":"](v)(v1.value0));
          };
          return new Many(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var scale = function (factor) {
      return transform(Graphics_Isometric_Point.scale(factor));
  };
  var rotateZ = function (angle) {
      return transform(Graphics_Isometric_Point.rotateZ(angle));
  };
  var rotateX = function (angle) {
      return transform(Graphics_Isometric_Point.rotateX(angle));
  };
  var prism = function (p) {
      return function (dx) {
          return function (dy) {
              return function (dz) {
                  var faceZ = [ Graphics_Isometric_Point.point(p.x)(p.y)(p.z), Graphics_Isometric_Point.point(p.x + dx)(p.y)(p.z), Graphics_Isometric_Point.point(p.x + dx)(p.y + dy)(p.z), Graphics_Isometric_Point.point(p.x)(p.y + dy)(p.z) ];
                  var faceY = [ Graphics_Isometric_Point.point(p.x)(p.y)(p.z), Graphics_Isometric_Point.point(p.x)(p.y)(p.z + dz), Graphics_Isometric_Point.point(p.x + dx)(p.y)(p.z + dz), Graphics_Isometric_Point.point(p.x + dx)(p.y)(p.z) ];
                  var faceX = [ Graphics_Isometric_Point.point(p.x)(p.y)(p.z), Graphics_Isometric_Point.point(p.x)(p.y + dy)(p.z), Graphics_Isometric_Point.point(p.x)(p.y + dy)(p.z + dz), Graphics_Isometric_Point.point(p.x)(p.y)(p.z + dz) ];
                  return [ Data_Array.reverse(faceZ), Prelude["<$>"](Prelude.functorArray)(Graphics_Isometric_Point.translateZ(dz))(faceZ), Data_Array.reverse(faceY), Prelude["<$>"](Prelude.functorArray)(Graphics_Isometric_Point.translateY(dy))(faceY), Data_Array.reverse(faceX), Prelude["<$>"](Prelude.functorArray)(Graphics_Isometric_Point.translateX(dx))(faceX) ];
              };
          };
      };
  };
  var monoidScene = new Data_Monoid.Monoid(function () {
      return semigroupScene;
  }, new Many(Data_Monoid.mempty(Data_List.monoidList)));
  var isometricAngle = $$Math.pi / 2.0 - $$Math.asin(1.0 / $$Math.sqrt(3.0));
  var project = function (p) {
      var beta = $$Math.pi / 4.0;
      var rotated = Graphics_Isometric_Point.rotateX(isometricAngle)(Graphics_Isometric_Point.rotateZ(beta)(p));
      return {
          x: -rotated.x, 
          y: rotated.y
      };
  };
  var renderFace = function (dir) {
      return function (color) {
          return function (face) {
              var normal = Graphics_Isometric_Point.normalize(Graphics_Isometric_Point.cross(Graphics_Isometric_Point.vector(face[0])(face[1]))(Graphics_Isometric_Point.vector(face[0])(face[2])));
              var amount = 0.2 + 0.2 * Graphics_Isometric_Point.dot(dir)(normal);
              var col = Graphics_Drawing_Color.lighten(amount)(color);
              return Graphics_Drawing.filled(Graphics_Drawing.fillColor(col))(Graphics_Drawing.closed(Data_Foldable.foldableArray)(Prelude["<$>"](Prelude.functorArray)(project)(face)));
          };
      };
  };
  var filled = Fill.create;
  var fillShape = function (dir) {
      return function (color) {
          return function (faces) {
              var totalDepth = function (face) {
                  return Data_Foldable.sum(Data_Foldable.foldableArray)(Prelude.semiringNumber)(Prelude["<$>"](Prelude.functorArray)(Graphics_Isometric_Point.depth)(face));
              };
              var sortedFaces = Data_Array.sortBy(Data_Ord.comparing(Prelude.ordNumber)(totalDepth))(faces);
              return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Graphics_Drawing.monoidDrawing)(renderFace(dir)(color))(sortedFaces);
          };
      };
  };
  var renderScene = function (dir) {
      return function (scene) {
          var dir$prime = Graphics_Isometric_Point.normalize(dir);
          var go = function (v) {
              if (v instanceof Fill) {
                  return fillShape(dir$prime)(v.value0)(v.value1);
              };
              if (v instanceof Many) {
                  return Data_Foldable.foldMap(Data_List.foldableList)(Graphics_Drawing.monoidDrawing)(go)(v.value0);
              };
              throw new Error("Failed pattern match at Graphics.Isometric line 152, column 1 - line 153, column 1: " + [ v.constructor.name ]);
          };
          return go(scene);
      };
  };
  var cube = function (p) {
      return function (dl) {
          return prism(p)(dl)(dl)(dl);
      };
  };
  exports["Fill"] = Fill;
  exports["Many"] = Many;
  exports["renderScene"] = renderScene;
  exports["filled"] = filled;
  exports["scale"] = scale;
  exports["rotateZ"] = rotateZ;
  exports["rotateX"] = rotateX;
  exports["translateZ"] = translateZ;
  exports["translateY"] = translateY;
  exports["translateX"] = translateX;
  exports["cube"] = cube;
  exports["prism"] = prism;
  exports["semigroupScene"] = semigroupScene;
  exports["monoidScene"] = monoidScene;;
 
})(PS["Graphics.Isometric"] = PS["Graphics.Isometric"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Graph = PS["Data.Graph"];
  var Data_List = PS["Data.List"];
  var Graphics_Isometric = PS["Graphics.Isometric"];     
  var Vertex = (function () {
      function Vertex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Vertex.create = function (value0) {
          return function (value1) {
              return new Vertex(value0, value1);
          };
      };
      return Vertex;
  })();
  var toScene = function (vertices) {
      var dropIndex = function (v) {
          return v.value1;
      };
      return Data_Foldable.foldMap(Data_List.foldableList)(Graphics_Isometric.monoidScene)(dropIndex)(vertices);
  };
  var flatten = function (v) {
      if (v instanceof Graphics_Isometric.Many) {
          return Prelude[">>="](Data_List.bindList)(v.value0)(flatten);
      };
      return Data_List.singleton(v);
  };
  var eqVertex = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude.eq(Prelude.eqInt)(v.value0)(v1.value0);
      };
  });
  var ordVertex = new Prelude.Ord(function () {
      return eqVertex;
  }, function (v) {
      return function (v1) {
          return Prelude.compare(Prelude.ordInt)(v.value0)(v1.value0);
      };
  });
  var bounds = function (shape) {
      var min$prime = function ($42) {
          return Data_Maybe_Unsafe.fromJust(Data_Foldable.minimum(Prelude.ordNumber)(Data_Foldable.foldableArray)($42));
      };
      var max$prime = function ($43) {
          return Data_Maybe_Unsafe.fromJust(Data_Foldable.maximum(Prelude.ordNumber)(Data_Foldable.foldableArray)($43));
      };
      var coords = Data_Array.concat(shape);
      var cZ = Prelude["<$>"](Prelude.functorArray)(function (v) {
          return v.z;
      })(coords);
      var cY = Prelude["<$>"](Prelude.functorArray)(function (v) {
          return v.y;
      })(coords);
      var cX = Prelude["<$>"](Prelude.functorArray)(function (v) {
          return v.x;
      })(coords);
      return {
          minX: min$prime(cX), 
          maxX: max$prime(cX), 
          minY: min$prime(cY), 
          maxY: max$prime(cY), 
          minZ: min$prime(cZ), 
          maxZ: max$prime(cZ)
      };
  };
  var isBehind = function (v) {
      return function (v1) {
          if (v.value1 instanceof Graphics_Isometric.Fill && v1.value1 instanceof Graphics_Isometric.Fill) {
              var b2 = bounds(v1.value1.value1);
              var b1 = bounds(v.value1.value1);
              var decide = (function () {
                  if (b1.maxX <= b2.minX) {
                      return true;
                  };
                  if (b2.maxX <= b1.minX) {
                      return false;
                  };
                  if (b1.maxY <= b2.minY) {
                      return true;
                  };
                  if (b2.maxY <= b1.minY) {
                      return false;
                  };
                  if (b1.maxZ <= b2.minZ) {
                      return true;
                  };
                  if (b2.maxZ <= b1.minZ) {
                      return false;
                  };
                  if (Prelude.otherwise) {
                      return true;
                  };
                  throw new Error("Failed pattern match at Graphics.Isometric.DepthSort line 53, column 1 - line 54, column 1: " + [  ]);
              })();
              return decide;
          };
          throw new Error("Failed pattern match at Graphics.Isometric.DepthSort line 53, column 1 - line 54, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var toGraph = function (scene) {
      var addKey = function (scene1) {
          return function (key) {
              return new Vertex(key, scene1);
          };
      };
      var addKeys = function (list) {
          return Data_List.zipWith(addKey)(list)(Data_List[".."](0)(Data_List.length(list) - 1));
      };
      var vertices = addKeys(flatten(scene));
      var edges = Prelude.bind(Data_List.bindList)(vertices)(function (v) {
          return Prelude.bind(Data_List.bindList)(vertices)(function (v1) {
              return Prelude.bind(Data_List.bindList)(Control_MonadPlus.guard(Data_List.monadPlusList)(isBehind(v)(v1)))(function () {
                  return Prelude["return"](Data_List.applicativeList)(new Data_Graph.Edge(v, v1));
              });
          });
      });
      return new Data_Graph.Graph(vertices, edges);
  };
  var depthSort = Prelude[">>>"](Prelude.semigroupoidFn)(toGraph)(Prelude[">>>"](Prelude.semigroupoidFn)(Data_Graph.topSort(eqVertex)(ordVertex))(toScene));
  exports["depthSort"] = depthSort;;
 
})(PS["Graphics.Isometric.DepthSort"] = PS["Graphics.Isometric.DepthSort"] || {});
(function(exports) {
      

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                   
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Graphics_Isometric = PS["Graphics.Isometric"];
  var Graphics_Isometric_Point = PS["Graphics.Isometric.Point"];
  var Graphics_Isometric_DepthSort = PS["Graphics.Isometric.DepthSort"];
  var $$Math = PS["Math"];
  var Signal_DOM = PS["Signal.DOM"];
  var Flare = PS["Flare"];
  var Flare_Drawing = PS["Flare.Drawing"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var yellow = Graphics_Drawing_Color.hsl(40.0)(0.9)(0.6);
  var scene1 = function (n) {
      return function (offset) {
          var dl = 230.0 / Data_Int.toNumber(n);
          var w = 0.9 * dl;
          return Graphics_Drawing.translate(250.0)(150.0)(Graphics_Isometric.renderScene({
              x: -4.0, 
              y: -1.0, 
              z: 3.0
          })(Data_Foldable.fold(Data_Foldable.foldableArray)(Graphics_Isometric.monoidScene)(Prelude.bind(Prelude.bindArray)(Data_Array[".."](0)(n))(function (v) {
              return Prelude.bind(Prelude.bindArray)(Data_Array[".."](0)(n))(function (v1) {
                  var y = Data_Int.toNumber(v1) / Data_Int.toNumber(n);
                  var x = Data_Int.toNumber(v) / Data_Int.toNumber(n);
                  var pos = {
                      x: dl * Data_Int.toNumber(v), 
                      y: dl * Data_Int.toNumber(v1), 
                      z: 0.0
                  };
                  var h = 2.0 * dl + 1.5 * dl * $$Math.sin($$Math.pi * x + offset) * $$Math.cos($$Math.pi * y + offset);
                  return Prelude["return"](Prelude.applicativeArray)(Graphics_Isometric.filled(Graphics_Drawing_Color.hsl(300.0 * x)(0.5)(0.5))(Graphics_Isometric.prism(pos)(w)(w)(h)));
              });
          }))));
      };
  };
  var red = Graphics_Drawing_Color.hsl(0.0)(0.6)(0.5);
  var scene4 = function (theta) {
      return function (phi) {
          var move = Prelude[">>>"](Prelude.semigroupoidFn)(Graphics_Isometric.rotateZ(0.4))(Prelude[">>>"](Prelude.semigroupoidFn)(Graphics_Isometric.translateY(1.1))(Graphics_Isometric.translateX(0.3)));
          var lz = $$Math.cos(theta);
          var ly = $$Math.sin(theta) * $$Math.sin(phi);
          var lx = $$Math.sin(theta) * $$Math.cos(phi);
          return Graphics_Drawing.translate(250.0)(200.0)(Graphics_Isometric.renderScene({
              x: lx, 
              y: ly, 
              z: lz
          })(Graphics_Isometric.scale(150.0)(Prelude["<>"](Graphics_Isometric.semigroupScene)(Graphics_Isometric.filled(yellow)(Graphics_Isometric.cube({
              x: 1.4 * lx, 
              y: 1.4 * ly, 
              z: 1.4 * lz
          })(5.0e-2)))(Prelude["<>"](Graphics_Isometric.semigroupScene)(Graphics_Isometric.filled(Graphics_Drawing_Color.black)(Graphics_Isometric.cube(Graphics_Isometric_Point.origin)(1.0)))(move(Graphics_Isometric.filled(red)(Graphics_Isometric.cube(Graphics_Isometric_Point.origin)(0.4))))))));
      };
  };
  var p = function (x) {
      return function (y) {
          return function (z) {
              return {
                  x: Data_Int.toNumber(x), 
                  y: Data_Int.toNumber(y), 
                  z: Data_Int.toNumber(z)
              };
          };
      };
  };
  var green = Graphics_Drawing_Color.hsl(110.0)(0.6)(0.5);
  var scene2 = function (rotZ) {
      return function (time) {
          var pos2 = 3.0 * $$Math.sin(1.0e-3 * time) - 0.5;
          var pos1 = 3.0 * $$Math.cos(1.0e-3 * time) - 0.5;
          return Graphics_Drawing.translate(250.0)(200.0)(Graphics_Isometric.renderScene({
              x: -4.0, 
              y: -1.0, 
              z: 3.0
          })(Graphics_Isometric.scale(45.0)(Graphics_Isometric_DepthSort.depthSort(Graphics_Isometric.rotateZ(rotZ)(Prelude["<>"](Graphics_Isometric.semigroupScene)(Graphics_Isometric.filled(Graphics_Drawing_Color.gray)(Graphics_Isometric.prism(Graphics_Isometric_Point.point(-3.5)(-3.5)(-0.5))(7.0)(7.0)(0.5)))(Prelude["<>"](Graphics_Isometric.semigroupScene)(Graphics_Isometric.filled(green)(Graphics_Isometric.prism(Graphics_Isometric_Point.point(-1.0)(pos1)(0.0))(2.0)(1.0)(2.0)))(Graphics_Isometric.filled(red)(Graphics_Isometric.prism(Graphics_Isometric_Point.point(pos2)(-1.0)(0.0))(1.0)(2.0)(2.0)))))))));
      };
  };
  var blue = Graphics_Drawing_Color.hsl(210.0)(0.8)(0.5);
  var scene3 = function (angle) {
      return Graphics_Drawing.translate(300.0)(150.0)(Graphics_Isometric.renderScene({
          x: -4.0, 
          y: -1.0, 
          z: 3.0
      })(Graphics_Isometric.scale(45.0)(Graphics_Isometric.rotateZ(angle)(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Graphics_Isometric.monoidScene)(function (pos) {
          return Graphics_Isometric.filled(blue)(Graphics_Isometric.cube(pos)(1.0));
      })([ p(1)(1)(0), p(1)(2)(0), p(1)(3)(0), p(2)(3)(0), p(3)(3)(0), p(0)(-2)(0), p(1)(-2)(0), p(2)(-2)(0), p(3)(-2)(0), p(3)(-1)(0), p(4)(-1)(0), p(5)(-1)(0), p(5)(-1)(0), p(5)(0)(0), p(4)(2)(0), p(5)(1)(0), p(5)(2)(0), p(4)(3)(0), p(1)(0)(1), p(1)(1)(1) ])))));
  };
  var main = function __do() {
      Flare_Drawing.runFlareDrawing("controls1")("canvas1")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(scene1)(Flare.intSlider("Points")(4)(10)(8)))(Flare.numberSlider("Wave")(0.0)(2.0 * $$Math.pi)(1.0e-2)(0.0)))();
      Flare_Drawing.runFlareDrawing("controls2")("canvas2")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(scene2)(Flare.numberSlider("Rotation")(0.0)(2.0 * $$Math.pi)(0.1)(0.0)))(Flare.lift(Signal_DOM.animationFrame)))();
      Flare_Drawing.runFlareDrawing("controls3")("canvas3")(Prelude["<$>"](Flare.functorUI)(scene3)(Flare.numberSlider("Rotation")(-0.25 * $$Math.pi)(0.25 * $$Math.pi)(1.0e-2)(0.0)))();
      return Flare_Drawing.runFlareDrawing("controls4")("canvas4")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(scene4)(Prelude["*"](Flare.semiringUI(Prelude.semiringNumber))(Prelude.pure(Flare.applicativeUI)(1.5e-3))(Flare.lift(Signal_DOM.animationFrame))))(Prelude.pure(Flare.applicativeUI)(-$$Math.pi / 3.0)))();
  };
  exports["main"] = main;
  exports["scene4"] = scene4;
  exports["yellow"] = yellow;
  exports["scene3"] = scene3;
  exports["blue"] = blue;
  exports["p"] = p;
  exports["scene2"] = scene2;
  exports["green"] = green;
  exports["red"] = red;
  exports["scene1"] = scene1;;
 
})(PS["Test.Main"] = PS["Test.Main"] || {});

PS["Test.Main"].main();
